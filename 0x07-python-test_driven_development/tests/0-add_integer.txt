========================
Using 0-add_integer.py
========================

This module defines an integer addition function ``add_integer(a, b=98)``.

:: importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

:: Test case for integers

    Using both positive an negetive integers in both arguments
    >>> add_integer(7, 4)
    11
    >>> add_integer(-5, 9)
    4
    >>> add_integer(12, -7)
    5
    >>> add_integer(-2, -6)
    -8
    
    Using only one argument (since ``b`` defaults to 98)
    >>> add_integer(2)
    100
    >>> add_integer(-8)
    90

:: Test case for floats
    Note that floats are to be casted to integer

    >>> add_integer(2.0, 4.0)
    6
    >>> add_integer(5, 4.6)
    9
    >>> add_integer(-7.4)
    91
    >>> add_integer(6.3, -3.8)
    3

:: Test case for Non-Numerals
    Note: If both arguments are not inrtegers,
    an exception is raised for the first argument only.

    : With strings

    >>> add_integer('a', 87)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(5, "hello")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer("Holberton", "School")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer("ALX") 
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    : With other Non-Numerals

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(34, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

:: Test case for float over (float('inf'))

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(5, float('inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

:: Test case for float NaN

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
        ...
    TypeError: cannot convert float NaN to integer

    >>> add_integer(64, float('nan'))
    Traceback (most recent call last):
        ...
    TypeError: cannot convert float NaN to integer